/*
 * Copyright (C) 2015 August Detlefsen
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package burp;

import java.awt.Color;

/**
 *
 * @author august
 */
public class GUIComponent extends javax.swing.JPanel {

    BurpExtender extender;
    IBurpExtenderCallbacks callbacks;
    
    public static final String SETTING_URL = "TF_SETTING_URL";
    public static final String SETTING_EXTRACT_PATTERN = "TF_SETTING_EXTRACT_PATTERN";
    public static final String SETTING_INSERT_PATTERN = "TF_SETTING_INSERT_PATTERN";
    
    /**
     * Creates new form GUIPanel
     */
    public GUIComponent(BurpExtender extender, IBurpExtenderCallbacks callbacks) {
        this.extender = extender;
        this.callbacks = callbacks;
        
        initComponents();
    }
    
    /**
     * Save all configured settings
     */
    public void saveSettings() {
        // Clear settings
        callbacks.saveExtensionSetting(SETTING_URL, null);
        callbacks.saveExtensionSetting(SETTING_EXTRACT_PATTERN, null);
        callbacks.saveExtensionSetting(SETTING_INSERT_PATTERN, null);
        
        // Store settings
        callbacks.printOutput("Saving URL: " + formUrl.getText());
        callbacks.saveExtensionSetting(SETTING_URL, formUrl.getText());
        
        callbacks.printOutput("Saving extract pattern: " + tokenExtractionPattern.getText());
        callbacks.saveExtensionSetting(SETTING_EXTRACT_PATTERN, tokenExtractionPattern.getText());
        
        callbacks.printOutput("Saving insert pattern: " + tokenInsertionPattern.getText());
        callbacks.saveExtensionSetting(SETTING_INSERT_PATTERN, tokenInsertionPattern.getText());
    }

    /**
     * Restores any found saved settings
     */
    public void restoreSettings() {
        String settingUrl = callbacks.loadExtensionSetting(SETTING_URL);
        callbacks.printOutput("Loaded URL: " + settingUrl);
        if (settingUrl != null) {
            formUrl.setText(settingUrl);
            extender.setFormUrl(settingUrl);
        }
        
        String settingExtractPattern = callbacks.loadExtensionSetting(SETTING_EXTRACT_PATTERN);
        callbacks.printOutput("Loaded extract pattern: " + settingExtractPattern);
        if (settingExtractPattern != null) {
            tokenExtractionPattern.setText(settingExtractPattern);
            extender.setTokenExtractionPattern(settingExtractPattern);
        }
        
        String settingInsertPattern = callbacks.loadExtensionSetting(SETTING_INSERT_PATTERN);
        callbacks.printOutput("Loaded insert pattern: " + settingInsertPattern);
        if (settingInsertPattern != null) {
            tokenInsertionPattern.setText(settingInsertPattern);
            extender.setTokenInsertionPattern(settingInsertPattern);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formUrl = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tokenInsertionPattern = new javax.swing.JTextField();
        tokenExtractionPattern = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        formUrl.setToolTipText("The URL to fetch the unique token value from");
        formUrl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formUrlKeyReleased(evt);
            }
        });

        jLabel1.setText("URL of token page: ");

        jLabel2.setText("Token Extraction Pattern:");

        tokenInsertionPattern.setToolTipText("The regular expression used to insert the fresh token into the request to be scanned");
        tokenInsertionPattern.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tokenInsertionPatternKeyReleased(evt);
            }
        });

        tokenExtractionPattern.setToolTipText("A regular expression used to extract a token from the token page");
        tokenExtractionPattern.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tokenExtractionPatternKeyReleased(evt);
            }
        });

        jLabel3.setText("Token Insertion Pattern:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(tokenExtractionPattern, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                        .addComponent(formUrl))
                    .addComponent(tokenInsertionPattern, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tokenExtractionPattern, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tokenInsertionPattern, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(187, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formUrlKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formUrlKeyReleased
        boolean success = extender.setFormUrl(formUrl.getText());
        if (success) {
            formUrl.setBackground(Color.white);
            saveSettings();
        } else {
            formUrl.setBackground(Color.yellow);
        }
    }//GEN-LAST:event_formUrlKeyReleased

    private void tokenExtractionPatternKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tokenExtractionPatternKeyReleased
        boolean success = extender.setTokenExtractionPattern(tokenExtractionPattern.getText());
        if (success) {
            tokenExtractionPattern.setBackground(Color.white);
            saveSettings();
        } else {
            tokenExtractionPattern.setBackground(Color.yellow);
        }
    }//GEN-LAST:event_tokenExtractionPatternKeyReleased

    private void tokenInsertionPatternKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tokenInsertionPatternKeyReleased
        boolean success = extender.setTokenInsertionPattern(tokenInsertionPattern.getText());
        if (success) {
            tokenInsertionPattern.setBackground(Color.white);
            saveSettings();
        } else {
            tokenInsertionPattern.setBackground(Color.yellow);
        }
    }//GEN-LAST:event_tokenInsertionPatternKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField formUrl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField tokenExtractionPattern;
    private javax.swing.JTextField tokenInsertionPattern;
    // End of variables declaration//GEN-END:variables
}
